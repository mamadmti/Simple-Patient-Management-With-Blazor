@page "/AddPatientAddresses"
@using Sureze.Domain.Entities
@using Sureze.Domain.Entities.Enums
@using Sureze.Helpers
@using System.Net
@using NUglify.Helpers
@using Sureze.Methods
@using Sureze.Services
@inject StateContainer StateContainer
@inject PatientsClass PatientsClass


<div class="top-row ">
    <h3>Add Patient Addresses</h3>
</div>


<div class="form-group">






    <label>address</label>
    <input type="text" @bind-value="_PatientAddresses.address" @bind-value:event="oninput" class="form-control" placeholder="address">

    <label>country</label>
    <input type="text" @bind-value="_PatientAddresses.country" @bind-value:event="oninput" class="form-control" placeholder="country">

    <label>phonenumber</label>
    <input type="number" @bind-value="_PatientAddresses.phonenumber" @bind-value:event="oninput" class="form-control" placeholder="phonenumber">

    <label>postalCode</label>
    <input type="number" @bind-value="_PatientAddresses.postalCode" @bind-value:event="oninput" class="form-control" placeholder="postalCode">



    <div class="col-6 pt-2">
        
        @if (errors.Count > 0)
        {
            <h2>Errors</h2>
            <ul class="text-danger">
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        }

    </div>



    <div style="text-align: center">

        <button class="btn btn-primary" @onclick="saveNewPatients" type="submit">Save Initial Info</button>

    </div>
</div>



@code {
    private PatientAddresses _PatientAddresses = new PatientAddresses();

    private List<string> errors = new();

    private void errorcheck()
    {

        if (_PatientAddresses.address.Length < 2)
        {
            errors.Add("your address should be more than 2 characters ");
        }
        if (_PatientAddresses.country.Length <= 0)
        {
            errors.Add("your country should be more than 0 characters ");
        }
        if (_PatientAddresses.phonenumber.Length == 0)
        {
            errors.Add("Please fill a phone number");
        }
        if (_PatientAddresses.postalCode.Length <= 0)
        {
            errors.Add("please enter your postal code");
        }
       
    }

    private async Task saveNewPatients()
    {
        errors.Clear();
        errorcheck();

        if (errors.Any())
        {
            return;
        }
        
        _PatientAddresses.CreateAt = DateTime.Now;
        _PatientAddresses.PatientsId = StateContainer.activeuserid;
        PatientAddresses pa = _PatientAddresses;
        await PatientsClass.NewPatientAddresses(pa);

        _PatientAddresses = new PatientAddresses();



    }




}
