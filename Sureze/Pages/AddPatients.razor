@page "/AddPatient"
@using Sureze.Domain.Entities
@using Sureze.Domain.Entities.Enums
@using Sureze.Helpers
@using System.Net
@using Sureze.Methods
@using Sureze.Services
@inject PatientsClass PatientsClass
@inject StateContainer StateContainer
@inject NavigationManager NavManager

<div class="top-row ">
    <h3>AddPatients</h3>
</div>

<div class=" row ">
        
    <div class="col-12 pt-2">

        <div style="text-align: center;">
            <img style="width: 200px;margin: 32px;border-radius: 30px;margin: 0;" src="@_patients.profilepicture" />
        </div>


    </div>
  
    <div class="col-6 pt-2">
        <label >Title</label>
   
    <label>TitleList  </label>
    <select class="form-select" @bind="SelectedTitle" aria-label=".form-select-sm example">
       
        
        @foreach (string item in TitleList )
       {

           <option value="@TitleList.IndexOf(item)" > @item </option>
          
 
       }
       
    </select>
    </div>

    <div class="col-6 pt-2">
        <label>PrimaryProviderList  </label>
        <select class="form-select" @bind="SelectedPrimaryProvider" aria-label=".form-select-sm example">
       
        
            @foreach (string item in PrimaryProviderList )
            {

                <option value="@PrimaryProviderList.IndexOf(item)" > @item </option>
          
 
            }
       
        </select>
    </div>
    <div class="col-6 pt-2">
        <label >Suffix</label>
        <input type="text" @bind-value="_patients.Suffix" @bind-value:event="oninput" class="form-control"  placeholder="Suffix">
    </div>
    
    <div class="col-6 pt-2">
        <label >FirstName</label>
        <input type="text" @bind-value="_patients.FirstName" @bind-value:event="oninput" class="form-control" placeholder="FirstName">
    </div>
    
    <div class="col-6 pt-2">
        <label >LastName</label>
        <input type="text" @bind-value="_patients.LastName" @bind-value:event="oninput" class="form-control" placeholder="LastName">
    </div>
    
    <div class="col-6 pt-2">
        <label>National Id </label>
        <input type="number" @onchange="(EventArgs) => {SearchforUnity(EventArgs.Value.ToString());}" class="form-control @(NationalIdIsValid?"":"is-invalid") " placeholder="National Id">
        
        
    </div>
    
    <div class="col-6 pt-2">
        <label >Birthdate</label>
        <input type="date" @bind-value="_patients.Birthdate" @bind-value:event="oninput" class="form-control" placeholder="Birthdate" >
    </div>

    
    <div class="col-6 pt-2">
        <label>SexList </label>
        <select class="form-select" @bind="SelectedSex" aria-label=".form-select-sm example">
       
        
            @foreach (string item in SexList )
            {

                <option value="@SexList.IndexOf(item)" > @item </option>
          
 
            }
       
        </select>
    </div>

    

    <div class="col-6 pt-2">
        <label>RaceList </label>
        <select class="form-select" @bind="SelectedRace" aria-label=".form-select-sm example">
       
        
            @foreach (string item in RaceList )
            {

                <option value="@RaceList.IndexOf(item)" > @item </option>
          
 
            }
       
        </select>
    </div>
    <div class="col-6 pt-2">
        <label>Profile picture </label>
        <InputFile OnChange="@LoadFiles" class="form-control" multiple accept=".png,.jpg,.jpeg"/>
        @* 
        <div style="text-align: center;">
            <img style="width: 225px; margin: 32px; border-radius: 30px;" src="@_patients.profilepicture"/>
        </div> *@


    </div>
    
    <div class="col-6 pt-2">
        
        @if (errors.Count > 0)
        {
            <h2>Errors</h2>
            <ul class="text-danger">
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        }

    </div>

    <div style="text-align: center" class="p-3">
        
        <button class="btn btn-primary" @onclick="saveNewPatients" type="submit">Save Initial Info</button>

    </div>
</div>



@code {
    private Patients _patients = new Patients();
    
    private List<string> TitleList = new List<string>();
    private List<string> PrimaryProviderList = new List<string>();
    private List<string> SexList = new List<string>();
    private List<string> RaceList = new List<string>();

    private int SelectedTitle = 0;
    private int SelectedPrimaryProvider = 0;
    private int SelectedSex =0;
    private int SelectedRace = 0;
    

    private int i;




    public List<string> TitleEnums()
    {
        return Enum.GetNames(typeof(PatientsEnums.Title)).ToList();
    } 

    public List<string> PrimaryProvider()
    {
        return Enum.GetNames(typeof(PatientsEnums.PrimaryProvider)).ToList();
    } 

    public List<string> Sex()
    {
        return Enum.GetNames(typeof(PatientsEnums.Sex)).ToList();
    }
    public List<string> Race()
    {
        return Enum.GetNames(typeof(PatientsEnums.Race)).ToList();
    }




    protected override async Task OnInitializedAsync()
    {
        TitleList = TitleEnums();
        PrimaryProviderList = PrimaryProvider();
        SexList = Sex();
        RaceList = Race();
    }





    private long maxFileSize = 1024 * 1024 * 1; // represents 3MB
    private int maxAllowedFiles = 1;
    private List<string> errors = new();

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        errors.Clear();

        if (e.FileCount > maxAllowedFiles)
        {
            errors.Add($"Error: Attempting to upload {e.FileCount} files, but only {maxAllowedFiles} files are allowed");
            return;
        }

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                string newFileName = Path.ChangeExtension(
                    Path.GetRandomFileName(), 
                    Path.GetExtension(file.Name));

                // string path = Path.Combine(
                //     config.GetValue<string>("FileStorage")!, 
                //     "tcorey", 
                //     newFileName);


                var ext = System.IO.Path.GetExtension(file.Name);
                string FileName = Guid.NewGuid().ToString() + ext;
                var imagePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/images/",FileName);




                // Directory.CreateDirectory(Path.Combine(
                //     config.GetValue<string>("FileStorage")!,
                //     "tcorey"));

                await using FileStream fs = new(imagePath, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                _patients.profilepicture = "images/"+ FileName ;

            }
            catch (Exception ex)
            {
                errors.Add($"File: {file.Name} Error: {ex.Message}");
            }
        }
    }

    private void errorcheck()
    {
        if (_patients.Birthdate < new DateTime(1900, 1, 1))
        {
            errors.Add("Cant Save Birthday Before 1900 ");
        }
        if (_patients.FirstName.Length < 2)
        {
            errors.Add("your FirstName should be more than 2 characters ");
        }
        if (_patients.LastName.Length < 2)
        {
            errors.Add("your LastName should be more than 2 characters ");
        }
        if (_patients.profilepicture.Length == 0)
        {
            errors.Add("Please upload a profile picture");
        }
        if (_patients.Suffix.Length < 2)
        {
            errors.Add("your suffix should be more than 2 characters ");
        }
        if (_patients.NatinalIdNumber.Length == 0)
        {
            errors.Add("your National id number should not be empty ");
        }
    }


    private async Task saveNewPatients ()
    { 
        errors.Clear();
        errorcheck();
            
        if (errors.Any())
        {
            return;
        }
        _patients.Title = (PatientsEnums.Title)SelectedTitle ;
        _patients.PrimaryProvider = (PatientsEnums.PrimaryProvider)SelectedPrimaryProvider ;
        _patients.Race = (PatientsEnums.Race)SelectedRace ;
        _patients.Sex = (PatientsEnums.Sex)SelectedSex ;

        _patients.CreateAt = DateTime.Now;

        var x = PatientsClass.NewPatient(_patients);
        StateContainer.UpdateHeading();
        NavManager.NavigateTo("/AddPatientAddresses");
    }

    private bool NationalIdIsValid = true;
    private async void SearchforUnity(string NatinalIdNumber)
    {
        _patients.NatinalIdNumber = NatinalIdNumber;
        var x = PatientsClass.UnityCheckForNatinalIdNumber(NatinalIdNumber);
        if (x.Result == false)
        {
            errors.Add("Your National Id Must be unique .");
        }
        NationalIdIsValid = x.Result;

    }


    string errorstring = "";


}
